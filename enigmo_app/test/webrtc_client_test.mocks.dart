// Mocks generated by Mockito 5.4.6 from annotations
// in enigmo_app/test/webrtc_client_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:enigmo_app/models/chat.dart' as _i5;
import 'package:enigmo_app/models/message.dart' as _i4;
import 'package:enigmo_app/services/crypto_engine.dart' as _i7;
import 'package:enigmo_app/services/network_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [NetworkService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkService extends _i1.Mock implements _i2.NetworkService {
  MockNetworkService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i4.Message> get newMessages =>
      (super.noSuchMethod(
            Invocation.getter(#newMessages),
            returnValue: _i3.Stream<_i4.Message>.empty(),
          )
          as _i3.Stream<_i4.Message>);

  @override
  _i3.Stream<List<_i4.Message>> get messageHistory =>
      (super.noSuchMethod(
            Invocation.getter(#messageHistory),
            returnValue: _i3.Stream<List<_i4.Message>>.empty(),
          )
          as _i3.Stream<List<_i4.Message>>);

  @override
  _i3.Stream<List<_i5.Chat>> get chats =>
      (super.noSuchMethod(
            Invocation.getter(#chats),
            returnValue: _i3.Stream<List<_i5.Chat>>.empty(),
          )
          as _i3.Stream<List<_i5.Chat>>);

  @override
  _i3.Stream<bool> get connectionStatus =>
      (super.noSuchMethod(
            Invocation.getter(#connectionStatus),
            returnValue: _i3.Stream<bool>.empty(),
          )
          as _i3.Stream<bool>);

  @override
  _i3.Stream<String> get newChatNotifications =>
      (super.noSuchMethod(
            Invocation.getter(#newChatNotifications),
            returnValue: _i3.Stream<String>.empty(),
          )
          as _i3.Stream<String>);

  @override
  _i3.Stream<List<Map<String, dynamic>>> get users =>
      (super.noSuchMethod(
            Invocation.getter(#users),
            returnValue: _i3.Stream<List<Map<String, dynamic>>>.empty(),
          )
          as _i3.Stream<List<Map<String, dynamic>>>);

  @override
  _i3.Stream<Map<String, dynamic>> get userStatusUpdates =>
      (super.noSuchMethod(
            Invocation.getter(#userStatusUpdates),
            returnValue: _i3.Stream<Map<String, dynamic>>.empty(),
          )
          as _i3.Stream<Map<String, dynamic>>);

  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);

  @override
  bool get isReconnecting =>
      (super.noSuchMethod(
            Invocation.getter(#isReconnecting),
            returnValue: false,
          )
          as bool);

  @override
  List<_i4.Message> getRecentMessages(String? otherUserId) =>
      (super.noSuchMethod(
            Invocation.method(#getRecentMessages, [otherUserId]),
            returnValue: <_i4.Message>[],
          )
          as List<_i4.Message>);

  @override
  void clearPeerSession(String? otherUserId) => super.noSuchMethod(
    Invocation.method(#clearPeerSession, [otherUserId]),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<bool> resetSession() =>
      (super.noSuchMethod(
            Invocation.method(#resetSession, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> connect({
    String? serverUrl,
    bool? ephemeralIdentity = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#connect, [], {
              #serverUrl: serverUrl,
              #ephemeralIdentity: ephemeralIdentity,
            }),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<String?> registerUser({String? nickname}) =>
      (super.noSuchMethod(
            Invocation.method(#registerUser, [], {#nickname: nickname}),
            returnValue: _i3.Future<String?>.value(),
          )
          as _i3.Future<String?>);

  @override
  _i3.Future<bool> authenticate() =>
      (super.noSuchMethod(
            Invocation.method(#authenticate, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> sendMessage(
    String? receiverId,
    String? content, {
    _i4.MessageType? type = _i4.MessageType.text,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #sendMessage,
              [receiverId, content],
              {#type: type},
            ),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<List<_i4.Message>> getMessageHistory(
    String? userId,
    String? otherUserId, {
    int? limit = 50,
    DateTime? before,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getMessageHistory,
              [userId, otherUserId],
              {#limit: limit, #before: before},
            ),
            returnValue: _i3.Future<List<_i4.Message>>.value(<_i4.Message>[]),
          )
          as _i3.Future<List<_i4.Message>>);

  @override
  _i3.Future<void> markMessageAsRead(String? messageId) =>
      (super.noSuchMethod(
            Invocation.method(#markMessageAsRead, [messageId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> getUsers() =>
      (super.noSuchMethod(
            Invocation.method(#getUsers, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void disconnect() => super.noSuchMethod(
    Invocation.method(#disconnect, []),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  bool isUserOnline(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#isUserOnline, [userId]),
            returnValue: false,
          )
          as bool);

  @override
  _i3.Future<bool> addUserToChat(String? targetUserId) =>
      (super.noSuchMethod(
            Invocation.method(#addUserToChat, [targetUserId]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> sendKeepalivePing() =>
      (super.noSuchMethod(
            Invocation.method(#sendKeepalivePing, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> setUserStatus({required bool? isActive}) =>
      (super.noSuchMethod(
            Invocation.method(#setUserStatus, [], {#isActive: isActive}),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> reconnect() =>
      (super.noSuchMethod(
            Invocation.method(#reconnect, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  void setManualDisconnect(bool? manual) => super.noSuchMethod(
    Invocation.method(#setManualDisconnect, [manual]),
    returnValueForMissingStub: null,
  );

  @override
  void setLifecycleService(dynamic lifecycleService) => super.noSuchMethod(
    Invocation.method(#setLifecycleService, [lifecycleService]),
    returnValueForMissingStub: null,
  );

  @override
  void send(String? type, Map<String, dynamic>? data) => super.noSuchMethod(
    Invocation.method(#send, [type, data]),
    returnValueForMissingStub: null,
  );

  @override
  void onMessage(
    String? messageType,
    dynamic Function(Map<String, dynamic>)? handler,
  ) => super.noSuchMethod(
    Invocation.method(#onMessage, [messageType, handler]),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<String> encrypt(String? data) =>
      (super.noSuchMethod(
            Invocation.method(#encrypt, [data]),
            returnValue: _i3.Future<String>.value(
              _i6.dummyValue<String>(this, Invocation.method(#encrypt, [data])),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<String> decrypt(String? encryptedData) =>
      (super.noSuchMethod(
            Invocation.method(#decrypt, [encryptedData]),
            returnValue: _i3.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#decrypt, [encryptedData]),
              ),
            ),
          )
          as _i3.Future<String>);
}

/// A class which mocks [CryptoEngine].
///
/// See the documentation for Mockito's code generation for more information.
class MockCryptoEngine extends _i1.Mock implements _i7.CryptoEngine {
  MockCryptoEngine() {
    _i1.throwOnMissingStub(this);
  }
}
