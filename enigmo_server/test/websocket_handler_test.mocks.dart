// Mocks generated by Mockito 5.4.6 from annotations
// in enigmo_server/test/websocket_handler_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:async/async.dart' as _i6;
import 'package:enigmo_server/models/message.dart' as _i4;
import 'package:enigmo_server/models/user.dart' as _i8;
import 'package:enigmo_server/services/auth_service.dart' as _i10;
import 'package:enigmo_server/services/message_manager.dart' as _i9;
import 'package:enigmo_server/services/user_manager.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;
import 'package:stream_channel/stream_channel.dart' as _i3;
import 'package:web_socket_channel/web_socket_channel.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWebSocketSink_0 extends _i1.SmartFake implements _i2.WebSocketSink {
  _FakeWebSocketSink_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamChannel_1<T> extends _i1.SmartFake
    implements _i3.StreamChannel<T> {
  _FakeStreamChannel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeServerMessage_2 extends _i1.SmartFake implements _i4.ServerMessage {
  _FakeServerMessage_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WebSocketChannel].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebSocketChannel extends _i1.Mock implements _i2.WebSocketChannel {
  MockWebSocketChannel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> get ready => (super.noSuchMethod(
        Invocation.getter(#ready),
        returnValue: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Stream<dynamic> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<dynamic>.empty(),
      ) as _i5.Stream<dynamic>);

  @override
  _i2.WebSocketSink get sink => (super.noSuchMethod(
        Invocation.getter(#sink),
        returnValue: _FakeWebSocketSink_0(
          this,
          Invocation.getter(#sink),
        ),
      ) as _i2.WebSocketSink);

  @override
  void pipe(_i3.StreamChannel<dynamic>? other) => super.noSuchMethod(
        Invocation.method(
          #pipe,
          [other],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.StreamChannel<S> transform<S>(
          _i3.StreamChannelTransformer<S, dynamic>? transformer) =>
      (super.noSuchMethod(
        Invocation.method(
          #transform,
          [transformer],
        ),
        returnValue: _FakeStreamChannel_1<S>(
          this,
          Invocation.method(
            #transform,
            [transformer],
          ),
        ),
      ) as _i3.StreamChannel<S>);

  @override
  _i3.StreamChannel<dynamic> transformStream(
          _i5.StreamTransformer<dynamic, dynamic>? transformer) =>
      (super.noSuchMethod(
        Invocation.method(
          #transformStream,
          [transformer],
        ),
        returnValue: _FakeStreamChannel_1<dynamic>(
          this,
          Invocation.method(
            #transformStream,
            [transformer],
          ),
        ),
      ) as _i3.StreamChannel<dynamic>);

  @override
  _i3.StreamChannel<dynamic> transformSink(
          _i6.StreamSinkTransformer<dynamic, dynamic>? transformer) =>
      (super.noSuchMethod(
        Invocation.method(
          #transformSink,
          [transformer],
        ),
        returnValue: _FakeStreamChannel_1<dynamic>(
          this,
          Invocation.method(
            #transformSink,
            [transformer],
          ),
        ),
      ) as _i3.StreamChannel<dynamic>);

  @override
  _i3.StreamChannel<dynamic> changeStream(
          _i5.Stream<dynamic> Function(_i5.Stream<dynamic>)? change) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeStream,
          [change],
        ),
        returnValue: _FakeStreamChannel_1<dynamic>(
          this,
          Invocation.method(
            #changeStream,
            [change],
          ),
        ),
      ) as _i3.StreamChannel<dynamic>);

  @override
  _i3.StreamChannel<dynamic> changeSink(
          _i5.StreamSink<dynamic> Function(_i5.StreamSink<dynamic>)? change) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeSink,
          [change],
        ),
        returnValue: _FakeStreamChannel_1<dynamic>(
          this,
          Invocation.method(
            #changeSink,
            [change],
          ),
        ),
      ) as _i3.StreamChannel<dynamic>);

  @override
  _i3.StreamChannel<S> cast<S>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeStreamChannel_1<S>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i3.StreamChannel<S>);
}

/// A class which mocks [WebSocketSink].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebSocketSink extends _i1.Mock implements _i2.WebSocketSink {
  MockWebSocketSink() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<dynamic> get done => (super.noSuchMethod(
        Invocation.getter(#done),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<dynamic> close([
    int? closeCode,
    String? closeReason,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #close,
          [
            closeCode,
            closeReason,
          ],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  void add(dynamic data) => super.noSuchMethod(
        Invocation.method(
          #add,
          [data],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<dynamic> addStream(_i5.Stream<dynamic>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #addStream,
          [stream],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
}

/// A class which mocks [UserManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserManager extends _i1.Mock implements _i7.UserManager {
  MockUserManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i8.User?> registerUser({
    required String? id,
    required String? publicSigningKey,
    required String? publicEncryptionKey,
    String? nickname,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerUser,
          [],
          {
            #id: id,
            #publicSigningKey: publicSigningKey,
            #publicEncryptionKey: publicEncryptionKey,
            #nickname: nickname,
          },
        ),
        returnValue: _i5.Future<_i8.User?>.value(),
      ) as _i5.Future<_i8.User?>);

  @override
  _i5.Future<_i8.User?> authenticateUser(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #authenticateUser,
          [userId],
        ),
        returnValue: _i5.Future<_i8.User?>.value(),
      ) as _i5.Future<_i8.User?>);

  @override
  _i8.User? getUserByToken(String? token) =>
      (super.noSuchMethod(Invocation.method(
        #getUserByToken,
        [token],
      )) as _i8.User?);

  @override
  void connectUser(
    String? userId,
    _i2.WebSocketChannel? channel,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #connectUser,
          [
            userId,
            channel,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void disconnectUser(String? userId) => super.noSuchMethod(
        Invocation.method(
          #disconnectUser,
          [userId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void disconnectChannel(_i2.WebSocketChannel? channel) => super.noSuchMethod(
        Invocation.method(
          #disconnectChannel,
          [channel],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.User? getUser(String? userId) => (super.noSuchMethod(Invocation.method(
        #getUser,
        [userId],
      )) as _i8.User?);

  @override
  _i5.Future<List<_i8.User>> getAllUsers() => (super.noSuchMethod(
        Invocation.method(
          #getAllUsers,
          [],
        ),
        returnValue: _i5.Future<List<_i8.User>>.value(<_i8.User>[]),
      ) as _i5.Future<List<_i8.User>>);

  @override
  List<_i8.User> getOnlineUsers() => (super.noSuchMethod(
        Invocation.method(
          #getOnlineUsers,
          [],
        ),
        returnValue: <_i8.User>[],
      ) as List<_i8.User>);

  @override
  bool isUserOnline(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #isUserOnline,
          [userId],
        ),
        returnValue: false,
      ) as bool);

  @override
  String? getUserIdByChannel(_i2.WebSocketChannel? channel) =>
      (super.noSuchMethod(Invocation.method(
        #getUserIdByChannel,
        [channel],
      )) as String?);

  @override
  _i2.WebSocketChannel? getUserChannel(String? userId) =>
      (super.noSuchMethod(Invocation.method(
        #getUserChannel,
        [userId],
      )) as _i2.WebSocketChannel?);

  @override
  _i5.Future<bool> sendToUser(
    String? userId,
    Map<String, dynamic>? message,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendToUser,
          [
            userId,
            message,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  Map<String, dynamic> getStats() => (super.noSuchMethod(
        Invocation.method(
          #getStats,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  Map<String, int> getUserStats() => (super.noSuchMethod(
        Invocation.method(
          #getUserStats,
          [],
        ),
        returnValue: <String, int>{},
      ) as Map<String, int>);
}

/// A class which mocks [MessageManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessageManager extends _i1.Mock implements _i9.MessageManager {
  MockMessageManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i4.ServerMessage> sendMessage({
    required String? senderId,
    required String? receiverId,
    required String? encryptedContent,
    required String? signature,
    _i4.MessageType? type = _i4.MessageType.text,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [],
          {
            #senderId: senderId,
            #receiverId: receiverId,
            #encryptedContent: encryptedContent,
            #signature: signature,
            #type: type,
            #metadata: metadata,
          },
        ),
        returnValue: _i5.Future<_i4.ServerMessage>.value(_FakeServerMessage_2(
          this,
          Invocation.method(
            #sendMessage,
            [],
            {
              #senderId: senderId,
              #receiverId: receiverId,
              #encryptedContent: encryptedContent,
              #signature: signature,
              #type: type,
              #metadata: metadata,
            },
          ),
        )),
      ) as _i5.Future<_i4.ServerMessage>);

  @override
  _i5.Future<List<_i4.ServerMessage>> getMessageHistory(
    String? userId1,
    String? userId2, {
    int? limit = 50,
    DateTime? before,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMessageHistory,
          [
            userId1,
            userId2,
          ],
          {
            #limit: limit,
            #before: before,
          },
        ),
        returnValue:
            _i5.Future<List<_i4.ServerMessage>>.value(<_i4.ServerMessage>[]),
      ) as _i5.Future<List<_i4.ServerMessage>>);

  @override
  _i5.Future<List<_i4.ServerMessage>> getUserMessages(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserMessages,
          [userId],
        ),
        returnValue:
            _i5.Future<List<_i4.ServerMessage>>.value(<_i4.ServerMessage>[]),
      ) as _i5.Future<List<_i4.ServerMessage>>);

  @override
  _i5.Future<bool> markMessageAsRead(
    String? messageId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markMessageAsRead,
          [
            messageId,
            userId,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> deliverOfflineMessages(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deliverOfflineMessages,
          [userId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  Map<String, dynamic> getMessageStats() => (super.noSuchMethod(
        Invocation.method(
          #getMessageStats,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i10.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.User? authenticateUserByToken(String? token) =>
      (super.noSuchMethod(Invocation.method(
        #authenticateUserByToken,
        [token],
      )) as _i8.User?);

  @override
  bool isValidToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #isValidToken,
          [token],
        ),
        returnValue: false,
      ) as bool);

  @override
  String generateToken(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #generateToken,
          [userId],
        ),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.method(
            #generateToken,
            [userId],
          ),
        ),
      ) as String);

  @override
  _i5.Future<bool> verifySignature(
    String? userId,
    String? timestamp,
    String? signatureBase64,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifySignature,
          [
            userId,
            timestamp,
            signatureBase64,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> authenticateUser(
    String? userId,
    String? signatureBase64,
    String? timestamp,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #authenticateUser,
          [
            userId,
            signatureBase64,
            timestamp,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> canAuthenticate(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #canAuthenticate,
          [userId],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}
