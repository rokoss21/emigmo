// Mocks generated by Mockito 5.4.6 from annotations
// in enigmo_server/test/message_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:enigmo_server/models/user.dart' as _i4;
import 'package:enigmo_server/services/user_manager.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:web_socket_channel/web_socket_channel.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [UserManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserManager extends _i1.Mock implements _i2.UserManager {
  MockUserManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.User?> registerUser({
    required String? id,
    required String? publicSigningKey,
    required String? publicEncryptionKey,
    String? nickname,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerUser,
          [],
          {
            #id: id,
            #publicSigningKey: publicSigningKey,
            #publicEncryptionKey: publicEncryptionKey,
            #nickname: nickname,
          },
        ),
        returnValue: _i3.Future<_i4.User?>.value(),
      ) as _i3.Future<_i4.User?>);

  @override
  _i3.Future<_i4.User?> authenticateUser(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #authenticateUser,
          [userId],
        ),
        returnValue: _i3.Future<_i4.User?>.value(),
      ) as _i3.Future<_i4.User?>);

  @override
  _i4.User? getUserByToken(String? token) =>
      (super.noSuchMethod(Invocation.method(
        #getUserByToken,
        [token],
      )) as _i4.User?);

  @override
  void connectUser(
    String? userId,
    _i5.WebSocketChannel? channel,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #connectUser,
          [
            userId,
            channel,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void disconnectUser(String? userId) => super.noSuchMethod(
        Invocation.method(
          #disconnectUser,
          [userId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void disconnectChannel(_i5.WebSocketChannel? channel) => super.noSuchMethod(
        Invocation.method(
          #disconnectChannel,
          [channel],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.User? getUser(String? userId) => (super.noSuchMethod(Invocation.method(
        #getUser,
        [userId],
      )) as _i4.User?);

  @override
  _i3.Future<List<_i4.User>> getAllUsers() => (super.noSuchMethod(
        Invocation.method(
          #getAllUsers,
          [],
        ),
        returnValue: _i3.Future<List<_i4.User>>.value(<_i4.User>[]),
      ) as _i3.Future<List<_i4.User>>);

  @override
  List<_i4.User> getOnlineUsers() => (super.noSuchMethod(
        Invocation.method(
          #getOnlineUsers,
          [],
        ),
        returnValue: <_i4.User>[],
      ) as List<_i4.User>);

  @override
  bool isUserOnline(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #isUserOnline,
          [userId],
        ),
        returnValue: false,
      ) as bool);

  @override
  String? getUserIdByChannel(_i5.WebSocketChannel? channel) =>
      (super.noSuchMethod(Invocation.method(
        #getUserIdByChannel,
        [channel],
      )) as String?);

  @override
  _i5.WebSocketChannel? getUserChannel(String? userId) =>
      (super.noSuchMethod(Invocation.method(
        #getUserChannel,
        [userId],
      )) as _i5.WebSocketChannel?);

  @override
  _i3.Future<bool> sendToUser(
    String? userId,
    Map<String, dynamic>? message,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendToUser,
          [
            userId,
            message,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  Map<String, dynamic> getStats() => (super.noSuchMethod(
        Invocation.method(
          #getStats,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  Map<String, int> getUserStats() => (super.noSuchMethod(
        Invocation.method(
          #getUserStats,
          [],
        ),
        returnValue: <String, int>{},
      ) as Map<String, int>);
}
